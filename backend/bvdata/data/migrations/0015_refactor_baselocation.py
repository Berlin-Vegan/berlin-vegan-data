# Generated by Django 3.2.2 on 2021-05-11 18:53

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("data", "0014_adjust_fields"),
    ]

    operations = [
        migrations.CreateModel(
            name="BaseLocation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "id_string",
                    models.CharField(
                        blank=True, max_length=32, unique=True, verbose_name="unique id"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("GASTRO", "Gastro"), ("SHOPPING", "Shopping")],
                        editable=False,
                        max_length=8,
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "updated",
                    models.DateTimeField(auto_now=True, verbose_name="updated"),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Name of location"),
                ),
                (
                    "street",
                    models.CharField(max_length=100, verbose_name="Street / No"),
                ),
                (
                    "postal_code",
                    models.CharField(max_length=5, verbose_name="Postal code"),
                ),
                (
                    "city",
                    models.CharField(
                        default="Berlin", max_length=20, verbose_name="City"
                    ),
                ),
                ("latitude", models.FloatField(verbose_name="latitude")),
                ("longitude", models.FloatField(verbose_name="longitude")),
                (
                    "telephone",
                    models.CharField(
                        blank=True, max_length=25, null=True, verbose_name="Telephone"
                    ),
                ),
                (
                    "website",
                    models.URLField(blank=True, null=True, verbose_name="Website"),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, null=True, verbose_name="E-mail"
                    ),
                ),
                (
                    "vegan",
                    models.IntegerField(
                        choices=[
                            (2, "Ominvore (vegan labeled)"),
                            (4, "Vegetarian (vegan labeled)"),
                            (5, "Vegan"),
                        ],
                        verbose_name="Vegan friendly",
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True, default="", verbose_name="Comment in German"
                    ),
                ),
                (
                    "comment_english",
                    models.TextField(
                        blank=True, default="", verbose_name="Comment in English"
                    ),
                ),
                (
                    "comment_opening_hours",
                    models.TextField(
                        blank=True, default="", verbose_name="Comment opening hours"
                    ),
                ),
                (
                    "review_link",
                    models.URLField(
                        blank=True,
                        default="",
                        max_length=255,
                        verbose_name="review link",
                    ),
                ),
                (
                    "closed",
                    models.DateField(default=None, null=True, verbose_name="closed"),
                ),
                (
                    "text_intern",
                    models.TextField(
                        blank=True, default="", verbose_name="text intern"
                    ),
                ),
                (
                    "has_sticker",
                    models.BooleanField(default=False, verbose_name="Sticker"),
                ),
                (
                    "is_submission",
                    models.BooleanField(default=True, verbose_name="Submission"),
                ),
                (
                    "submit_email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        verbose_name="Submitter e-mail",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BooleanAttribute",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("organic", "Organic"),
                            ("delivery", "Delivery"),
                            ("handicapped_accessible", "Handicapped Accessible"),
                            ("webshop", "Webshop"),
                        ],
                        max_length=22,
                    ),
                ),
                (
                    "state",
                    models.BooleanField(
                        choices=[(None, "unknown"), (True, "yes"), (False, "no")],
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OpeningHours",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "weekday",
                    models.CharField(
                        choices=[
                            ("MONDAY", "Monday"),
                            ("TUESDAY", "Tuesday"),
                            ("WEDNESDAY", "Wednesday"),
                            ("THURSDAY", "Thursday"),
                            ("FRIDAY", "Friday"),
                            ("SATURDAY", "Saturday"),
                            ("SUNDAY", "Sunday"),
                        ],
                        max_length=9,
                    ),
                ),
                ("opening", models.TimeField(blank=True, null=True)),
                ("closing", models.TimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tag",
                    models.CharField(
                        choices=[
                            ("foods", "Foods"),
                            ("clothing", "Clothing"),
                            ("toiletries", "Toiletries"),
                            ("supermarket", "Supermarket"),
                            ("hairdressers", "Hairdressers"),
                            ("sports", "Sports"),
                            ("tattoostudio", "Tattoostudio"),
                            ("accommodation", "accommodation"),
                            ("bar", "Bar"),
                            ("cafe", "Cafe"),
                            ("ice cream parlor", "Ice Cream Parlor"),
                            ("snack bar", "Snack Bar"),
                            ("restaurant", "Restaurant"),
                        ],
                        max_length=16,
                        unique=True,
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="tag",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "tag__in",
                        [
                            "foods",
                            "clothing",
                            "toiletries",
                            "supermarket",
                            "hairdressers",
                            "sports",
                            "tattoostudio",
                            "accommodation",
                            "bar",
                            "cafe",
                            "ice cream parlor",
                            "snack bar",
                            "restaurant",
                        ],
                    )
                ),
                name="data_tag_tag_valid",
            ),
        ),
        migrations.AddField(
            model_name="openinghours",
            name="location",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="data.baselocation"
            ),
        ),
        migrations.AddConstraint(
            model_name="booleanattribute",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "name__in",
                        ["organic", "delivery", "handicapped_accessible", "webshop"],
                    )
                ),
                name="data_booleanattribute_name_valid",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="booleanattribute",
            unique_together={("name", "state")},
        ),
        migrations.AddField(
            model_name="baselocation",
            name="boolean_attributes",
            field=models.ManyToManyField(to="data.BooleanAttribute"),
        ),
        migrations.AddField(
            model_name="baselocation",
            name="last_editor",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
                verbose_name="last editor",
            ),
        ),
        migrations.AddField(
            model_name="baselocation",
            name="tags",
            field=models.ManyToManyField(to="data.Tag"),
        ),
        migrations.AddConstraint(
            model_name="openinghours",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "weekday__in",
                        [
                            "MONDAY",
                            "TUESDAY",
                            "WEDNESDAY",
                            "THURSDAY",
                            "FRIDAY",
                            "SATURDAY",
                            "SUNDAY",
                        ],
                    )
                ),
                name="data_openinghours_weekday_valid",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="openinghours",
            unique_together={("weekday", "location")},
        ),
        migrations.AddConstraint(
            model_name="baselocation",
            constraint=models.CheckConstraint(
                check=models.Q(("type__in", ["GASTRO", "SHOPPING"])),
                name="data_baselocation_type_valid",
            ),
        ),
    ]
